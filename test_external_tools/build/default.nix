# Generated by CMake Nix Generator
with import <nixpkgs> {};
with pkgs;
with lib;

let
# Helper functions for DRY derivations

  cmakeNixCC = {
    name,
    src,
    compiler ? gcc,
    flags ? "",
    source,  # Source file path relative to src
    buildInputs ? [],
    propagatedInputs ? []
  }: stdenv.mkDerivation {
    inherit name src buildInputs propagatedInputs;
    dontFixup = true;
    buildPhase = ''
      mkdir -p "$(dirname "$out")"
      # Determine compiler binary name based on the compiler derivation
      compilerBin="${
        if compiler == gcc || compiler == pkgsi686Linux.gcc then
          "gcc"
        else if compiler == clang || compiler == pkgsi686Linux.clang then
          "clang"
        else if compiler == gfortran || compiler == pkgsi686Linux.gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
      }"
      # When src is a directory, Nix unpacks it into a subdirectory
      # We need to find the actual source file
      # Store source in a variable to handle paths with spaces
      sourceFile="${source}"
      # Check if source is an absolute path or Nix expression (e.g., derivation/file)
      if [[ "$sourceFile" == /* ]] || [[ "$sourceFile" == *"\$"* ]]; then
        # Absolute path or Nix expression - use as-is
        srcFile="$sourceFile"
      elif [[ -f "$sourceFile" ]]; then
        srcFile="$sourceFile"
      elif [[ -f "$(basename "$src")/$sourceFile" ]]; then
        srcFile="$(basename "$src")/$sourceFile"
      else
        echo "Error: Cannot find source file $sourceFile"
        exit 1
      fi
      ${compiler}/bin/$compilerBin -c ${flags} "$srcFile" -o "$out"
    '';
    installPhase = "true";
  };

  # Linking helper function
  # NOTE: This uses Unix-style library naming conventions (lib*.a, lib*.so)
  # This is appropriate since Nix only runs on Unix-like systems (Linux, macOS)
  cmakeNixLD = {
    name,
    type ? "executable",  # "executable", "static", "shared", "module"
    objects,
    compiler ? gcc,
    compilerCommand ? null,  # Override compiler binary name (e.g., "g++" for C++)
    flags ? "",
    libraries ? [],
    buildInputs ? [],
    version ? null,
    soversion ? null,
    postBuildPhase ? ""
  }: stdenv.mkDerivation {
    inherit name objects buildInputs;
    dontUnpack = true;
    buildPhase =
      if type == "static" then ''
        # Unix static library: uses 'ar' to create lib*.a files
        mkdir -p "$(dirname "$out")"
        ar rcs "$out" $objects
      '' else if type == "shared" || type == "module" then ''
        mkdir -p $out
        compilerBin="${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc || compiler == pkgsi686Linux.gcc then
          "gcc"
        else if compiler == clang || compiler == pkgsi686Linux.clang then
          "clang"
        else if compiler == gfortran || compiler == pkgsi686Linux.gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
        }";
        # Unix library naming: static=lib*.a, shared=lib*.so, module=*.so
        libname="${if type == "module" then name else "lib" + name}.so"
        ${if version != null && type != "module" then ''
          libname="lib${name}.so.${version}"
        '' else ""}
        ${compiler}/bin/$compilerBin -shared $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out/$libname"
        # Create version symlinks if needed (only for shared libraries, not modules)
        ${if version != null && type != "module" then ''
          ln -sf "$libname" "$out/lib${name}.so"
          ${if soversion != null then ''
            ln -sf "$libname" "$out/lib${name}.so.${soversion}"
          '' else ""}
        '' else ""}
      '' else ''
        mkdir -p "$(dirname "$out")"
        compilerBin="${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc || compiler == pkgsi686Linux.gcc then
          "gcc"
        else if compiler == clang || compiler == pkgsi686Linux.clang then
          "clang"
        else if compiler == gfortran || compiler == pkgsi686Linux.gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
        }";
        ${compiler}/bin/$compilerBin $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out"
      '';
    inherit postBuildPhase;
    installPhase = "true";
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_mkdir_7664 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_mkdir_7664";
    buildInputs = [ pkgs.coreutils ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -Dcfgdir= -P /home/mpedersen/topics/cmake_nix_backend/CMake/test_external_tools/build/simple_external-prefix/tmp/simple_external-mkdirs.cmake
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-mkdir
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-mkdir $out/simple_external-prefix/src/simple_external-stamp/simple_external-mkdir
    '';
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_download_4965 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_download_4965";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_gitinfo_txt custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_mkdir ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_gitinfo_txt}/simple_external-gitinfo.txt .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_mkdir}/simple_external-mkdir .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -DCMAKE_MESSAGE_LOG_LEVEL=VERBOSE -P /home/mpedersen/topics/cmake_nix_backend/CMake/test_external_tools/build/simple_external-prefix/tmp/simple_external-gitclone.cmake
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-download
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-download $out/simple_external-prefix/src/simple_external-stamp/simple_external-download
    '';
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_updatedisconnected_1843 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_updatedisconnected_1843";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_tmp_simpleexternal_gitupdate_cmake custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_update_info_txt custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_download ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_tmp_simpleexternal_gitupdate_cmake}/simple_external-gitupdate.cmake .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_update_info_txt}/simple_external-update-info.txt .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_download}/simple_external-download .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -Dcan_fetch=NO -DCMAKE_MESSAGE_LOG_LEVEL=VERBOSE -P /home/mpedersen/topics/cmake_nix_backend/CMake/test_external_tools/build/simple_external-prefix/tmp/simple_external-gitupdate.cmake
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-update_disconnected
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-update_disconnected $out/simple_external-prefix/src/simple_external-stamp/simple_external-update_disconnected
    '';
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patchdisconnected_2302 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patchdisconnected_2302";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patch_info_txt custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_updatedisconnected ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patch_info_txt}/simple_external-patch-info.txt .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_updatedisconnected}/simple_external-update_disconnected .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E echo_append
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-patch_disconnected
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-patch_disconnected $out/simple_external-prefix/src/simple_external-stamp/simple_external-patch_disconnected
    '';
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_configure_6528 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_configure_6528";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_tmp_simpleexternal_cfgcmd_txt custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patchdisconnected ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_tmp_simpleexternal_cfgcmd_txt}/simple_external-cfgcmd.txt .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patchdisconnected}/simple_external-patch_disconnected .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E echo_append
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-configure
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-configure $out/simple_external-prefix/src/simple_external-stamp/simple_external-configure
    '';
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_build_1533 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_build_1533";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_configure ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_configure}/simple_external-configure .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E echo_append
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-build
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-build $out/simple_external-prefix/src/simple_external-stamp/simple_external-build
    '';
  };

  custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_install_6277 = stdenv.mkDerivation {
    name = "custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_install_6277";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_build ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_build}/simple_external-build .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E echo_append
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch simple_external-prefix/src/simple_external-stamp/simple_external-install
      mkdir -p $out/simple_external-prefix/src/simple_external-stamp
      cp simple_external-prefix/src/simple_external-stamp/simple_external-install $out/simple_external-prefix/src/simple_external-stamp/simple_external-install
    '';
  };

  custom_build_CMakeFiles_simpleexternal_complete_9877 = stdenv.mkDerivation {
    name = "custom_build_CMakeFiles_simpleexternal_complete_9877";
    buildInputs = [ pkgs.coreutils custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_install custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_mkdir custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_download custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_updatedisconnected custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patchdisconnected custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_configure custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_build ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_install}/simple_external-install .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_mkdir}/simple_external-mkdir .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_download}/simple_external-download .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_updatedisconnected}/simple_external-update_disconnected .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_patchdisconnected}/simple_external-patch_disconnected .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_configure}/simple_external-configure .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_build}/simple_external-build .
      cp ${custom_build_simpleexternal_prefix_src_simpleexternal_stamp_simpleexternal_install}/simple_external-install .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E make_directory /home/mpedersen/topics/cmake_nix_backend/CMake/test_external_tools/build/CMakeFiles
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch CMakeFiles/simple_external-complete
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E touch /home/mpedersen/topics/cmake_nix_backend/CMake/test_external_tools/build/simple_external-prefix/src/simple_external-stamp/simple_external-done
      mkdir -p $out/CMakeFiles
      cp CMakeFiles/simple_external-complete $out/CMakeFiles/simple_external-complete
    '';
  };

  custom_build_CMakeFiles_simpleexternal = stdenv.mkDerivation {
    name = "custom_build_CMakeFiles_simpleexternal";
    buildInputs = [ custom_build_CMakeFiles_simpleexternal_complete ];
    phases = [ "installPhase" ];
    installPhase = ''
      mkdir -p $out
      mkdir -p $out/CMakeFiles
      touch $out/CMakeFiles/simple_external
    '';
  };

# Per-translation-unit derivations
  external_test_test_external_tools_main_cpp_o = cmakeNixCC {
    name = "main.o";
    src = ./..;
    buildInputs = [ gcc (import ./../pkg_fmt.nix { inherit pkgs; }) ];
    source = "main.cpp";
    compiler = gcc;
    flags = "-O3 -DNDEBUG -std=gnu++17 -Ibuild/simple_external-prefix/src/simple_external/single_include -std=c++17";
  };


  # Linking derivations
  link_external_test = cmakeNixLD {
    name = "external_test";
    type = "executable";
    buildInputs = [ gcc (import ../pkg_fmt.nix { inherit pkgs; }) ];
    objects = [ external_test_test_external_tools_main_cpp_o ];
    compiler = gcc;
    compilerCommand = "g++";
    flags = "-lfmt::fmt-header-only";
  };

in
{
  "external_test" = link_external_test;
}
