#!/usr/bin/env -S just --justfile

# Run the external tools test
run:
    #!/usr/bin/env bash
    set -euo pipefail
    
    echo "=== Testing ExternalProject_Add and FetchContent ==="
    echo "NOTE: This test demonstrates that these features are incompatible with Nix"
    echo ""
    
    # Clean previous build
    rm -rf build default.nix
    
    # Configure with Nix generator (expect this to fail)
    echo "Configuring project..."
    if ../bin/cmake -G Nix -S . -B build 2>&1; then
        echo "❌ Configuration succeeded unexpectedly!"
        echo "Expected configuration to fail due to FetchContent incompatibility"
        exit 1
    else
        echo "✅ Configuration failed as expected"
        echo ""
        echo "This is the expected behavior because:"
        echo "1. FetchContent tries to download dependencies at configure time"
        echo "2. Nix builds are pure and cannot access the network"
        echo "3. The downloaded content would not be in the Nix store"
        echo ""
        echo "Recommended alternatives for Nix:"
        echo "- Pre-fetch dependencies and add to Nix store"
        echo "- Use find_package() with Nix-provided packages"
        echo "- Include dependencies as Git submodules"
        echo "- Use Nix flakes for dependency management"
        echo ""
        echo "Example: Instead of FetchContent for fmt, create pkg_fmt.nix:"
        echo "  { fmt }:"
        echo "  {"
        echo "    buildInputs = [ fmt ];"
        echo "    cmakeFlags = [];"
        echo "  }"
    fi

# Clean build artifacts
clean:
    rm -rf build default.nix

# Show what ExternalProject/FetchContent would do
explain:
    @echo "ExternalProject_Add and FetchContent in Nix context:"
    @echo "===================================================="
    @echo ""
    @echo "These CMake modules download code during configure/build time,"
    @echo "which conflicts with Nix's reproducible build philosophy."
    @echo ""
    @echo "Recommended alternatives for Nix:"
    @echo "1. Pre-fetch dependencies and add to Nix store"
    @echo "2. Use find_package() with Nix-provided packages"
    @echo "3. Include dependencies as Git submodules"
    @echo "4. Use Nix flakes for dependency management"
    @echo ""
    @echo "Example Nix approach:"
    @echo "  - Create pkg_json.nix for nlohmann/json"
    @echo "  - Create pkg_fmt.nix for fmt library"
    @echo "  - Use find_package(nlohmann_json) and find_package(fmt)"