/* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
   file LICENSE.rst or https://cmake.org/licensing for details.  */
#include "cmGlobalNixGenerator.h"

#include <cm/memory>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <set>

#include "cmGeneratedFileStream.h"
#include "cmGeneratorTarget.h"
#include "cmLocalNixGenerator.h"
#include "cmMakefile.h"
#include "cmSourceFile.h"
#include "cmSystemTools.h"
#include "cmake.h"
#include "cmNixTargetGenerator.h"
#include "cmNixCustomCommandGenerator.h"
#include "cmCustomCommand.h"
#include "cmListFileCache.h"
#include "cmValue.h"
#include "cmState.h"

// String constants for performance optimization
const std::string cmGlobalNixGenerator::DefaultConfig = "Release";
const std::string cmGlobalNixGenerator::CLanguage = "C";
const std::string cmGlobalNixGenerator::CXXLanguage = "CXX";
const std::string cmGlobalNixGenerator::GccCompiler = "gcc";
const std::string cmGlobalNixGenerator::ClangCompiler = "clang";

cmGlobalNixGenerator::cmGlobalNixGenerator(cmake* cm)
  : cmGlobalCommonGenerator(cm)
{
  // Set the make program file
  this->FindMakeProgramFile = "CMakeNixFindMake.cmake";
}

std::unique_ptr<cmLocalGenerator> cmGlobalNixGenerator::CreateLocalGenerator(
  cmMakefile* mf)
{
  return std::unique_ptr<cmLocalGenerator>(
    cm::make_unique<cmLocalNixGenerator>(this, mf));
}

cmDocumentationEntry cmGlobalNixGenerator::GetDocumentation()
{
  return { cmGlobalNixGenerator::GetActualName(),
           "Generates Nix expressions for building C/C++ projects with "
           "fine-grained derivations for maximal parallelism and caching." };
}

void cmGlobalNixGenerator::Generate()
{
  // First call the parent Generate to set up targets
  this->cmGlobalGenerator::Generate();
  
  // Generate our Nix output
  this->WriteNixFile();
}

std::vector<cmGlobalGenerator::GeneratedMakeCommand>
cmGlobalNixGenerator::GenerateBuildCommand(
  std::string const& makeProgram, std::string const& /*projectName*/,
  std::string const& projectDir,
  std::vector<std::string> const& targetNames, std::string const& /*config*/,
  int /*jobs*/, bool /*verbose*/, cmBuildOptions const& /*buildOptions*/,
  std::vector<std::string> const& /*makeOptions*/)
{
  // Check if this is a try-compile (look for CMakeScratch in path)
  bool isTryCompile = projectDir.find("CMakeScratch") != std::string::npos;
  
  GeneratedMakeCommand makeCommand;
  
  // For Nix generator, we use nix-build as the build program
  makeCommand.Add(this->SelectMakeProgram(makeProgram, "nix-build"));
  
  // Add default.nix file
  makeCommand.Add("default.nix");
  
  // Add target names as attribute paths  
  for (auto const& tname : targetNames) {
    if (!tname.empty()) {
      makeCommand.Add("-A", tname);
    }
  }
  
  // For try-compile, add post-build copy commands to move binaries from Nix store
  if (isTryCompile && !targetNames.empty()) {
    GeneratedMakeCommand copyCommand;
    copyCommand.Add("sh");
    copyCommand.Add("-c");
    
    std::string copyScript = "set -e; ";
    for (auto const& tname : targetNames) {
      if (!tname.empty()) {
        // Read the target location file and copy the binary
        copyScript += "if [ -f \"" + tname + "_loc\" ]; then ";
        copyScript += "TARGET_LOCATION=$(cat \"" + tname + "_loc\"); ";
        copyScript += "if [ -f \"result\" ]; then ";
        copyScript += "STORE_PATH=$(readlink result); ";
        copyScript += "cp \"$STORE_PATH\" \"$TARGET_LOCATION\" 2>/dev/null || true; ";
        copyScript += "fi; fi; ";
      }
    }
    copyScript += "true"; // Ensure script always succeeds
    
    copyCommand.Add(copyScript);
    
    return { std::move(makeCommand), std::move(copyCommand) };
  }
  
  return { std::move(makeCommand) };
}

void cmGlobalNixGenerator::WriteNixFile()
{
  std::string nixFile = this->GetCMakeInstance()->GetHomeOutputDirectory();
  nixFile += "/default.nix";
  
  cmGeneratedFileStream nixFileStream(nixFile);
  nixFileStream.SetCopyIfDifferent(true);
  
  if (!nixFileStream) {
    return;
  }

  // Write Nix file header
  nixFileStream << "# Generated by CMake Nix Generator\n"
                << "with import <nixpkgs> {};\n\n"
                << "let\n";

  // Collect and write custom command derivations first
  this->CustomCommandOutputs = this->CollectCustomCommands();
  this->WriteCustomCommandDerivations(nixFileStream);

  // Collect install targets
  this->CollectInstallTargets();

  // Write per-translation-unit derivations
  this->WritePerTranslationUnitDerivations(nixFileStream);
  
  // Write linking derivations
  this->WriteLinkingDerivations(nixFileStream);
  
  // Write install derivations in the let block  
  this->WriteInstallRules(nixFileStream);
  
  nixFileStream << "in\n{\n";
  
  // Write final target outputs
  for (auto const& lg : this->LocalGenerators) {
    auto const& targets = lg->GetGeneratorTargets();
    for (auto const& target : targets) {
      if (target->GetType() == cmStateEnums::EXECUTABLE ||
          target->GetType() == cmStateEnums::STATIC_LIBRARY ||
          target->GetType() == cmStateEnums::SHARED_LIBRARY) {
        nixFileStream << "  \"" << target->GetName() << "\" = "
                      << this->GetDerivationName(target->GetName()) << ";\n";
      }
    }
  }

  // Write install outputs
  this->WriteInstallOutputs(nixFileStream);
  
  nixFileStream << "}\n";
}

void cmGlobalNixGenerator::WritePerTranslationUnitDerivations(
  cmGeneratedFileStream& nixFileStream)
{
  nixFileStream << "  # Per-translation-unit derivations\n";
  
  for (auto const& lg : this->LocalGenerators) {
    auto const& targets = lg->GetGeneratorTargets();
    for (auto const& target : targets) {
      if (target->GetType() == cmStateEnums::EXECUTABLE ||
          target->GetType() == cmStateEnums::STATIC_LIBRARY ||
          target->GetType() == cmStateEnums::SHARED_LIBRARY) {
        
        // Get source files for this target
        std::vector<cmSourceFile*> sources;
        target->GetSourceFiles(sources, "");
        
        // Pre-create target generator and cache configuration for efficiency
        auto targetGen = cmNixTargetGenerator::New(target.get());
        std::string config = target->Target->GetMakefile()->GetSafeDefinition("CMAKE_BUILD_TYPE");
        if (config.empty()) {
          config = "Release";
        }
        
        // Pre-compute and cache library dependencies for this target
        std::pair<cmGeneratorTarget*, std::string> cacheKey = {target.get(), config};
        if (this->LibraryDependencyCache.find(cacheKey) == this->LibraryDependencyCache.end()) {
          this->LibraryDependencyCache[cacheKey] = targetGen->GetTargetLibraryDependencies(config);
        }
        
        for (cmSourceFile* source : sources) {
          std::string const& lang = source->GetLanguage();
          if (lang == "C" || lang == "CXX") {
            this->WriteObjectDerivation(nixFileStream, target.get(), source);
          }
        }
      }
    }
  }
}

void cmGlobalNixGenerator::WriteLinkingDerivations(
  cmGeneratedFileStream& nixFileStream)
{
  nixFileStream << "\n  # Linking derivations\n";
  
  for (auto const& lg : this->LocalGenerators) {
    auto const& targets = lg->GetGeneratorTargets();
    for (auto const& target : targets) {
      if (target->GetType() == cmStateEnums::EXECUTABLE ||
          target->GetType() == cmStateEnums::STATIC_LIBRARY ||
          target->GetType() == cmStateEnums::SHARED_LIBRARY) {
        this->WriteLinkDerivation(nixFileStream, target.get());
      }
    }
  }
}

std::string cmGlobalNixGenerator::GetDerivationName(
  std::string const& targetName, std::string const& sourceFile) const
{
  // Create cache key
  std::string cacheKey = targetName + "|" + sourceFile;
  
  // Check cache first
  auto it = this->DerivationNameCache.find(cacheKey);
  if (it != this->DerivationNameCache.end()) {
    return it->second;
  }
  
  std::string result;
  if (sourceFile.empty()) {
    result = "link_" + targetName;
  } else {
    // Use just the filename, not the full path
    std::string filename = cmSystemTools::GetFilenameName(sourceFile);
    
    // Convert filename to valid Nix identifier
    std::string name = filename;
    std::replace(name.begin(), name.end(), '.', '_');
    result = targetName + "_" + name + "_o";
  }
  
  // Cache the result
  this->DerivationNameCache[cacheKey] = result;
  return result;
}

void cmGlobalNixGenerator::WriteObjectDerivation(
  cmGeneratedFileStream& nixFileStream, cmGeneratorTarget* target, 
  cmSourceFile* source)
{
  std::string sourceFile = source->GetFullPath();
  std::string derivName = this->GetDerivationName(target->GetName(), sourceFile);
  std::string objectName = cmSystemTools::GetFilenameWithoutLastExtension(
    cmSystemTools::GetFilenameName(sourceFile)) + ".o";
  std::string lang = source->GetLanguage();
  
  // Get the configuration (Debug, Release, etc.)
  std::string config = target->Target->GetMakefile()->GetSafeDefinition("CMAKE_BUILD_TYPE");
  if (config.empty()) {
    config = "Release"; // Default configuration
  }
  
  // Get the local generator for this target
  cmLocalGenerator* lg = target->GetLocalGenerator();
  
  // Get configuration-specific compile flags
  std::string compileFlags;
  lg->GetTargetCompileFlags(target, config, lang, compileFlags);
  
  // Get configuration-specific preprocessor definitions
  std::set<std::string> defines;
  lg->GetTargetDefines(target, config, lang, defines);
  std::string defineFlags;
  for (const std::string& define : defines) {
    if (!defineFlags.empty()) defineFlags += " ";
    defineFlags += "-D" + define;
  }
  
  // Get include directories from target with proper configuration
  std::vector<BT<std::string>> includesBT = target->GetIncludeDirectories(lang, config);
  std::string includeFlags;
  for (const auto& inc : includesBT) {
    if (!includeFlags.empty()) includeFlags += " ";
    // Convert absolute include paths to relative for Nix build environment
    std::string relativeInclude = cmSystemTools::RelativePath(
      this->GetCMakeInstance()->GetHomeOutputDirectory(), inc.Value);
    includeFlags += "-I" + (!relativeInclude.empty() ? relativeInclude : inc.Value);
  }
  
  nixFileStream << "  " << derivName << " = stdenv.mkDerivation {\n";
  nixFileStream << "    name = \"" << objectName << "\";\n";
  
  // Determine source path - check if this source file is external
  std::string sourceDir = this->GetCMakeInstance()->GetHomeDirectory();
  std::string buildDir = this->GetCMakeInstance()->GetHomeOutputDirectory();
  std::string projectSourceRelPath = cmSystemTools::RelativePath(buildDir, sourceDir);
  std::string relativePath = cmSystemTools::RelativePath(sourceDir, sourceFile);
  
  // Check if source file is external (outside project tree)
  bool isExternalSource = (relativePath.find("../") == 0 || cmSystemTools::FileIsFullPath(relativePath));
  
  if (isExternalSource) {
    // For external sources, create a composite source including both project and external file
    nixFileStream << "    src = pkgs.runCommand \"composite-src\" {} ''\n";
    nixFileStream << "      mkdir -p $out\n";
    // Copy project source tree
    if (projectSourceRelPath.empty()) {
      nixFileStream << "      cp -r ${./.}/* $out/ 2>/dev/null || true\n";
    } else {
      nixFileStream << "      cp -r ${./" << projectSourceRelPath << "}/* $out/ 2>/dev/null || true\n";
    }
    // Copy external source file to build dir root
    std::string fileName = cmSystemTools::GetFilenameName(sourceFile);
    nixFileStream << "      cp ${" << sourceFile << "} $out/" << fileName << "\n";
    
    // For ABI detection files, also copy the required header file
    if (fileName.find("CMakeCCompilerABI.c") != std::string::npos ||
        fileName.find("CMakeCXXCompilerABI.cpp") != std::string::npos) {
      std::string sourceDir = cmSystemTools::GetFilenamePath(sourceFile);
      nixFileStream << "      cp ${" << sourceDir << "/CMakeCompilerABI.h} $out/CMakeCompilerABI.h\n";
    }
    nixFileStream << "    '';\n";
  } else {
    // Regular project source
    if (projectSourceRelPath.empty()) {
      nixFileStream << "    src = ./.;\n";
    } else {
      // Remove trailing slash if present
      if (!projectSourceRelPath.empty() && projectSourceRelPath.back() == '/') {
        projectSourceRelPath.pop_back();
      }
      nixFileStream << "    src = ./" << projectSourceRelPath << ";\n";
    }
  }
  
  // Get external library dependencies for compilation (headers) - use cache
  std::pair<cmGeneratorTarget*, std::string> cacheKey = {target, config};
  std::vector<std::string> libraryDeps;
  auto libCacheIt = this->LibraryDependencyCache.find(cacheKey);
  if (libCacheIt != this->LibraryDependencyCache.end()) {
    libraryDeps = libCacheIt->second;
  } else {
    // Fallback: compute and cache
    auto targetGen = cmNixTargetGenerator::New(target);
    libraryDeps = targetGen->GetTargetLibraryDependencies(config);
    this->LibraryDependencyCache[cacheKey] = libraryDeps;
  }
  
  // Build buildInputs list including external libraries for headers
  std::string compilerPkg = this->GetCompilerPackage(lang);
  nixFileStream << "    buildInputs = [ " << compilerPkg;
  for (const std::string& lib : libraryDeps) {
    if (!lib.empty()) {
      if (lib.find("__NIXPKG__") == 0) {
        // This is a built-in Nix package
        std::string nixPkg = lib.substr(9); // Remove "__NIXPKG__" prefix
        if (!nixPkg.empty()) {
          nixFileStream << " " << nixPkg;
        }
      } else {
        // This is a file import
        nixFileStream << " (import " << lib << " { inherit pkgs; })";
      }
    }
  }
  
  // Check if this source file is generated by a custom command
  std::string customCommandDep;
  auto it = this->CustomCommandOutputs.find(sourceFile);
  if (it != this->CustomCommandOutputs.end()) {
    customCommandDep = it->second;
    nixFileStream << " " << customCommandDep;
  }
  
  nixFileStream << " ];\n";
  
  nixFileStream << "    dontFixup = true;\n";
  
  // Add header dependencies - use cached target generator or create new one
  std::vector<std::string> headers;
  if (libCacheIt != this->LibraryDependencyCache.end()) {
    // We already have a target generator, reuse computation pattern
    auto targetGen = cmNixTargetGenerator::New(target);
    headers = targetGen->GetSourceDependencies(source);
  }
  
  if (!headers.empty()) {
    nixFileStream << "    # Header dependencies\n";
    nixFileStream << "    propagatedInputs = [\n";
    for (const std::string& header : headers) {
      nixFileStream << "      ./" << header << "\n";
    }
    nixFileStream << "    ];\n";
  }
  
  nixFileStream << "    # Configuration: " << config << "\n";
  nixFileStream << "    buildPhase = ''\n";
  
  // Determine the source path - use custom command output if generated
  std::string sourcePath;
  if (!customCommandDep.empty()) {
    // Source is generated by a custom command - reference from derivation output
    std::string fileName = cmSystemTools::GetFilenameName(sourceFile);
    sourcePath = "${" + customCommandDep + "}/" + fileName;
  } else {
    // Regular source file - use relative path from source directory
    std::string projectSourceDir = this->GetCMakeInstance()->GetHomeDirectory();
    std::string relativePath = cmSystemTools::RelativePath(projectSourceDir, sourceFile);
    
    // Check if this is an external source file (outside project tree)
    if (relativePath.find("../") == 0 || cmSystemTools::FileIsFullPath(relativePath)) {
      // External source file - use just the filename, it will be copied to build dir
      std::string fileName = cmSystemTools::GetFilenameName(sourceFile);
      sourcePath = fileName;
    } else {
      // Regular source file within project tree
      sourcePath = relativePath;
    }
  }
  
  // Combine all flags: compile flags + defines + includes
  std::string allFlags;
  if (!compileFlags.empty()) allFlags += compileFlags + " ";
  if (!defineFlags.empty()) allFlags += defineFlags + " ";
  if (!includeFlags.empty()) allFlags += includeFlags + " ";
  
  // Add -fPIC for shared libraries
  if (target->GetType() == cmStateEnums::SHARED_LIBRARY) {
    allFlags += "-fPIC ";
  }
  
  // Remove trailing space
  if (!allFlags.empty() && allFlags.back() == ' ') {
    allFlags.pop_back();
  }
  
  std::string compilerCmd = this->GetCompilerCommand(lang);
  nixFileStream << "      " << compilerCmd << " -c " << allFlags << " \"" << sourcePath 
    << "\" -o \"$out\"\n";
  nixFileStream << "    '';\n";
  nixFileStream << "    installPhase = \"true\"; # No install needed for objects\n";
  nixFileStream << "  };\n\n";
}

void cmGlobalNixGenerator::WriteLinkDerivation(
  cmGeneratedFileStream& nixFileStream, cmGeneratorTarget* target)
{
  std::string derivName = this->GetDerivationName(target->GetName());
  std::string targetName = target->GetName();
  
  nixFileStream << "  " << derivName << " = stdenv.mkDerivation {\n";
  
  // Generate appropriate name for target type
  std::string outputName;
  if (target->GetType() == cmStateEnums::SHARED_LIBRARY) {
    outputName = "lib" + targetName + ".so";
  } else {
    outputName = targetName;
  }
  
  nixFileStream << "    name = \"" << outputName << "\";\n";
  
  // Get external library dependencies using cache
  std::string config = target->Target->GetMakefile()->GetSafeDefinition("CMAKE_BUILD_TYPE");
  if (config.empty()) {
    config = "Release";
  }
  
  std::pair<cmGeneratorTarget*, std::string> cacheKey = {target, config};
  std::vector<std::string> libraryDeps;
  auto libCacheIt = this->LibraryDependencyCache.find(cacheKey);
  if (libCacheIt != this->LibraryDependencyCache.end()) {
    libraryDeps = libCacheIt->second;
  } else {
    // Fallback: compute and cache
    auto targetGen = cmNixTargetGenerator::New(target);
    libraryDeps = targetGen->GetTargetLibraryDependencies(config);
    this->LibraryDependencyCache[cacheKey] = libraryDeps;
  }
  
  // Get link implementation for dependency processing
  auto linkImpl = target->GetLinkImplementation(config, cmGeneratorTarget::UseTo::Compile);
  
  // Build buildInputs list including external libraries
  // Determine the primary language for linking
  std::string primaryLang = "C";
  std::vector<cmSourceFile*> sources;
  target->GetSourceFiles(sources, "");
  for (cmSourceFile* source : sources) {
    if (source->GetLanguage() == "CXX") {
      primaryLang = "CXX";
      break;  // C++ takes precedence
    }
  }
  
  std::string compilerPkg = this->GetCompilerPackage(primaryLang);
  nixFileStream << "    buildInputs = [ " << compilerPkg;
  
  // Add external library dependencies
  for (const std::string& lib : libraryDeps) {
    if (!lib.empty()) {
      if (lib.find("__NIXPKG__") == 0) {
        // This is a built-in Nix package
        std::string nixPkg = lib.substr(9); // Remove "__NIXPKG__" prefix
        if (!nixPkg.empty()) {
          nixFileStream << " " << nixPkg;
        }
      } else {
        // This is a file import
        nixFileStream << " (import " << lib << " { inherit pkgs; })";
      }
    }
  }
  
  // Add CMake target dependencies (only shared libraries, not static)
  if (linkImpl) {
    for (const cmLinkItem& item : linkImpl->Libraries) {
      if (item.Target && !item.Target->IsImported()) {
        // Only add shared libraries to buildInputs, not static libraries
        if (item.Target->GetType() == cmStateEnums::SHARED_LIBRARY) {
          std::string depDerivName = this->GetDerivationName(item.Target->GetName());
          nixFileStream << " " << depDerivName;
        }
      }
    }
  }
  
  nixFileStream << " ];\n";
  
  nixFileStream << "    dontUnpack = true;\n";  // No source to unpack
  
  // Collect object file dependencies (reuse sources from above)
  
  nixFileStream << "    objects = [\n";
  for (cmSourceFile* source : sources) {
    std::string const& lang = source->GetLanguage();
    if (lang == "C" || lang == "CXX") {
      std::string objDerivName = this->GetDerivationName(
        target->GetName(), source->GetFullPath());
      nixFileStream << "      " << objDerivName << "\n";
    }
  }
  nixFileStream << "    ];\n";
  
  // Target dependencies will be referenced directly in link flags
  
  // Get library link flags for build phase
  std::string linkFlags;
  if (linkImpl) {
    for (const cmLinkItem& item : linkImpl->Libraries) {
      if (item.Target && item.Target->IsImported()) {
        // This is an imported target from find_package
        std::string importedTargetName = item.Target->GetName();
        // Need to create target generator for package mapper access
        auto targetGen = cmNixTargetGenerator::New(target);
        std::string flags = targetGen->GetPackageMapper().GetLinkFlags(importedTargetName);
        if (!flags.empty()) {
          linkFlags += " " + flags;
        }
      } else if (item.Target && !item.Target->IsImported()) {
        // This is a CMake target within the same project
        std::string depTargetName = item.Target->GetName();
        std::string depDerivName = this->GetDerivationName(depTargetName);
        
        // Add appropriate link flags based on target type using direct references
        if (item.Target->GetType() == cmStateEnums::SHARED_LIBRARY) {
          // For shared libraries, use Nix string interpolation
          linkFlags += " ${" + depDerivName + "}/lib" + depTargetName + ".so";
        } else if (item.Target->GetType() == cmStateEnums::STATIC_LIBRARY) {
          // For static libraries, link the archive directly using string interpolation
          linkFlags += " ${" + depDerivName + "}";
        }
      } else if (!item.Target) { 
        // External library (not a target)
        std::string libName = item.AsStr();
        linkFlags += " -l" + libName;
      }
    }
  }
  
  std::string linkCompilerCmd = this->GetCompilerCommand(primaryLang);
  nixFileStream << "    buildPhase = ''\n";
  if (target->GetType() == cmStateEnums::EXECUTABLE) {
    nixFileStream << "      " << linkCompilerCmd << " $objects" << linkFlags << " -o \"$out\"\n";
  } else if (target->GetType() == cmStateEnums::STATIC_LIBRARY) {
    nixFileStream << "      ar rcs \"$out\" $objects\n";
  } else if (target->GetType() == cmStateEnums::SHARED_LIBRARY) {
    // Get library version properties
    cmValue version = target->GetProperty("VERSION");
    cmValue soversion = target->GetProperty("SOVERSION");
    
    nixFileStream << "      mkdir -p $out\n";
    std::string libName = "lib" + targetName + ".so";
    
    if (version && soversion) {
      // Create versioned library and symlinks
      std::string versionedName = libName + "." + *version;
      std::string soversionName = libName + "." + *soversion;
      
      nixFileStream << "      " << linkCompilerCmd << " -shared $objects" << linkFlags 
                    << " -Wl,-soname," << soversionName << " -Wl,-rpath,$out/lib -o $out/" << versionedName << "\n";
      nixFileStream << "      ln -sf " << versionedName << " $out/" << soversionName << "\n";
      nixFileStream << "      ln -sf " << versionedName << " $out/" << libName << "\n";
    } else {
      // Simple shared library without versioning
      nixFileStream << "      " << linkCompilerCmd << " -shared $objects" << linkFlags 
                    << " -Wl,-rpath,$out/lib -o $out/" << libName << "\n";
    }
  }
  nixFileStream << "    '';\n";
  nixFileStream << "    installPhase = \"true\"; # No install needed\n";
  nixFileStream << "  };\n\n";
}

std::vector<std::string> cmGlobalNixGenerator::GetSourceDependencies(
  std::string const& /*sourceFile*/) const
{
  // TODO: Implement header dependency tracking
  // This will use CMake's existing dependency analysis
  return {};
}

std::string cmGlobalNixGenerator::GetCompilerPackage(const std::string& lang) const
{
  // Check cache first
  auto it = this->CompilerPackageCache.find(lang);
  if (it != this->CompilerPackageCache.end()) {
    return it->second;
  }
  
  cmake* cm = this->GetCMakeInstance();
  std::string compilerIdVar = "CMAKE_" + lang + "_COMPILER_ID";
  
  cmValue compilerId = cm->GetState()->GetGlobalProperty(compilerIdVar);
  if (!compilerId) {
    // Try to get from cache
    compilerId = cm->GetCacheDefinition(compilerIdVar);
  }
  
  std::string result;
  if (compilerId) {
    std::string id = *compilerId;
    if (id == "GNU") {
      result = "gcc";
    } else if (id == "Clang" || id == "AppleClang") {
      result = "clang";
    } else if (id == "MSVC") {
      // For future Windows support
      result = "msvc";
    } else {
      // Default fallback - in Nix context, gcc is usually available
      result = "gcc";
    }
  } else {
    // Default fallback - in Nix context, gcc is usually available
    result = "gcc";
  }
  
  // Cache the result
  this->CompilerPackageCache[lang] = result;
  return result;
}

std::string cmGlobalNixGenerator::GetCompilerCommand(const std::string& lang) const
{
  // Check cache first
  auto it = this->CompilerCommandCache.find(lang);
  if (it != this->CompilerCommandCache.end()) {
    return it->second;
  }
  
  // In Nix, we use the compiler from the Nix package
  // The actual command depends on the package and language
  std::string compilerPkg = this->GetCompilerPackage(lang);
  
  std::string result;
  if (compilerPkg == "gcc") {
    result = (lang == "CXX") ? "g++" : "gcc";
  } else if (compilerPkg == "clang") {
    result = (lang == "CXX") ? "clang++" : "clang";
  } else {
    // Default fallback
    result = (lang == "CXX") ? "g++" : "gcc";
  }
  
  // Cache the result
  this->CompilerCommandCache[lang] = result;
  return result;
}

std::map<std::string, std::string> cmGlobalNixGenerator::CollectCustomCommands()
{
  std::map<std::string, std::string> outputToDerivation;
  std::set<cmCustomCommand const*> processedCommands;
  
  // Note: std::map doesn't have reserve(), but std::unordered_map would
  // For now, the std::map will resize as needed
  
  // Iterate through all targets to find custom commands
  for (auto const& lg : this->LocalGenerators) {
    auto const& targets = lg->GetGeneratorTargets();
    for (auto const& target : targets) {
      if (target->GetType() == cmStateEnums::EXECUTABLE ||
          target->GetType() == cmStateEnums::STATIC_LIBRARY ||
          target->GetType() == cmStateEnums::SHARED_LIBRARY ||
          target->GetType() == cmStateEnums::UTILITY) {
        
        // Get source files that might have custom commands
        std::vector<cmSourceFile*> sources;
        target->GetSourceFiles(sources, "");
        
        for (cmSourceFile* source : sources) {
          cmCustomCommand const* cc = source->GetCustomCommand();
          if (cc && processedCommands.find(cc) == processedCommands.end()) {
            processedCommands.insert(cc);
            
            // Create custom command generator
            std::string config = target->Target->GetMakefile()->GetSafeDefinition("CMAKE_BUILD_TYPE");
            if (config.empty()) {
              config = "Release";
            }
            
            cmNixCustomCommandGenerator ccGen(cc, target->GetLocalGenerator(), config);
            std::string derivName = ccGen.GetDerivationName();
            
            // Map all outputs to this derivation
            std::vector<std::string> outputs = ccGen.GetOutputs();
            for (const std::string& output : outputs) {
              outputToDerivation[output] = derivName;
            }
          }
        }
        
        // Also check for PRE_BUILD, PRE_LINK, POST_BUILD commands
        std::vector<cmCustomCommand> const& preBuildCommands = target->GetPreBuildCommands();
        std::vector<cmCustomCommand> const& postBuildCommands = target->GetPostBuildCommands();
        
        // Note: These need special handling as they're not file-generating commands
        // For now, we'll skip them and focus on OUTPUT-based custom commands
      }
    }
  }
  
  return outputToDerivation;
}

void cmGlobalNixGenerator::WriteCustomCommandDerivations(
  cmGeneratedFileStream& nixFileStream)
{
  if (this->CustomCommandOutputs.empty()) {
    return;
  }
  
  nixFileStream << "  # Custom command derivations\n";
  
  std::set<std::string> writtenDerivations;
  
  // Iterate through all targets again to write custom commands
  for (auto const& lg : this->LocalGenerators) {
    auto const& targets = lg->GetGeneratorTargets();
    for (auto const& target : targets) {
      if (target->GetType() == cmStateEnums::EXECUTABLE ||
          target->GetType() == cmStateEnums::STATIC_LIBRARY ||
          target->GetType() == cmStateEnums::SHARED_LIBRARY ||
          target->GetType() == cmStateEnums::UTILITY) {
        
        // Get source files that might have custom commands
        std::vector<cmSourceFile*> sources;
        target->GetSourceFiles(sources, "");
        
        for (cmSourceFile* source : sources) {
          cmCustomCommand const* cc = source->GetCustomCommand();
          if (cc) {
            std::string config = target->Target->GetMakefile()->GetSafeDefinition("CMAKE_BUILD_TYPE");
            if (config.empty()) {
              config = "Release";
            }
            
            cmNixCustomCommandGenerator ccGen(cc, target->GetLocalGenerator(), config);
            std::string derivName = ccGen.GetDerivationName();
            
            // Only write each derivation once
            if (writtenDerivations.find(derivName) == writtenDerivations.end()) {
              writtenDerivations.insert(derivName);
              ccGen.Generate(nixFileStream);
            }
          }
        }
      }
    }
  }
  
  nixFileStream << "\n";
}

void cmGlobalNixGenerator::WriteInstallOutputs(cmGeneratedFileStream& nixFileStream)
{
  for (cmGeneratorTarget* target : this->InstallTargets) {
    std::string targetName = target->GetName();
    std::string derivName = this->GetDerivationName(targetName);
    std::string installDerivName = derivName + "_install";
    
    nixFileStream << "  \"" << targetName << "_install\" = " << installDerivName << ";\n";
  }
}

void cmGlobalNixGenerator::CollectInstallTargets()
{
  this->InstallTargets.clear();
  
  for (auto const& lg : this->LocalGenerators) {
    auto const& targets = lg->GetGeneratorTargets();
    for (auto const& target : targets) {
      // For now, add all targets that can be installed (executables and libraries)
      // A more sophisticated implementation would check for actual install() commands
      if (target->GetType() == cmStateEnums::EXECUTABLE ||
          target->GetType() == cmStateEnums::STATIC_LIBRARY ||
          target->GetType() == cmStateEnums::SHARED_LIBRARY) {
        this->InstallTargets.push_back(target.get());
      }
    }
  }
}

void cmGlobalNixGenerator::WriteInstallRules(cmGeneratedFileStream& nixFileStream)
{
  if (this->InstallTargets.empty()) {
    return;
  }
  
  nixFileStream << "\n  # Install derivations\n";
  
  for (cmGeneratorTarget* target : this->InstallTargets) {
    std::string targetName = target->GetName();
    std::string derivName = this->GetDerivationName(targetName);
    std::string installDerivName = derivName + "_install";
    
    nixFileStream << "  " << installDerivName << " = stdenv.mkDerivation {\n";
    nixFileStream << "    name = \"" << targetName << "-install\";\n";
    nixFileStream << "    src = " << derivName << ";\n";
    nixFileStream << "    dontUnpack = true;\n";
    nixFileStream << "    dontBuild = true;\n";
    nixFileStream << "    dontConfigure = true;\n";
    nixFileStream << "    installPhase = ''\n";
    nixFileStream << "      mkdir -p $out/bin $out/lib $out/include\n";
    
    // Determine installation destination based on target type
    if (target->GetType() == cmStateEnums::EXECUTABLE) {
      nixFileStream << "      cp $src $out/bin/" << targetName << "\n";
    } else if (target->GetType() == cmStateEnums::SHARED_LIBRARY) {
      nixFileStream << "      cp -r $src/* $out/lib/ 2>/dev/null || true\n";
    } else if (target->GetType() == cmStateEnums::STATIC_LIBRARY) {
      nixFileStream << "      cp $src $out/lib/lib" << targetName << ".a\n";
    }
    
    nixFileStream << "    '';\n";
    nixFileStream << "  };\n\n";
  }
} 