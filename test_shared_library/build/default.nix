# Generated by CMake Nix Generator
with import <nixpkgs> {};
with pkgs;

let
# Helper functions for DRY derivations

  cmakeNixCC = {
    name,
    src,
    compiler ? gcc,
    flags ? "",
    source,  # Source file path relative to src
    buildInputs ? [],
    propagatedInputs ? []
  }: stdenv.mkDerivation {
    inherit name src buildInputs propagatedInputs;
    dontFixup = true;
    buildPhase = ''
      compilerBin=$(
        if [[ "${compiler}" == "${gcc}" ]]; then
          echo "gcc"
        elif [[ "${compiler}" == "${clang}" ]]; then
          echo "clang"
        else
          echo "${compiler.pname or "cc"}"
        fi
      )
      ${compiler}/bin/$compilerBin -c ${flags} "${source}" -o "$out"
    '';
    installPhase = "true";
  };

  cmakeNixLD = {
    name,
    type ? "executable",  # "executable", "static", "shared", "module"
    objects,
    compiler ? gcc,
    compilerCommand ? null,  # Override compiler binary name (e.g., "g++" for C++)
    flags ? "",
    libraries ? [],
    buildInputs ? [],
    version ? null,
    soversion ? null,
    postBuildPhase ? ""
  }: stdenv.mkDerivation {
    inherit name objects buildInputs;
    dontUnpack = true;
    buildPhase =
      if type == "static" then ''
        ar rcs "$out" $objects
      '' else if type == "shared" || type == "module" then ''
        mkdir -p $out
        compilerBin=${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else
          compiler.pname or "cc"
        }
        libname="${if type == "module" then name else "lib" + name}.so"
        ${if version != null && type != "module" then ''
          libname="lib${name}.so.${version}"
        '' else ""}
        ${compiler}/bin/$compilerBin -shared $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out/$libname"
        # Create version symlinks if needed (only for shared libraries, not modules)
        ${if version != null && type != "module" then ''
          ln -sf "$libname" "$out/lib${name}.so"
          ${if soversion != null then ''
            ln -sf "$libname" "$out/lib${name}.so.${soversion}"
          '' else ""}
        '' else ""}
      '' else ''
        compilerBin=${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else
          compiler.pname or "cc"
        }
        ${compiler}/bin/$compilerBin $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out"
      '';
    inherit postBuildPhase;
    installPhase = "true";
  };

# Per-translation-unit derivations
  mylib_test_shared_library_lib_c_o = stdenv.mkDerivation {
    name = "lib.o";
    src = ./..;
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      gcc -c -O3 -DNDEBUG -fPIC -Dmylib_EXPORTS -fPIC "lib.c" -o "$out"
    '';
    installPhase = "true";
  };

  versioned_lib_test_shared_library_versioned_c_o = stdenv.mkDerivation {
    name = "versioned.o";
    src = ./..;
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      gcc -c -O3 -DNDEBUG -fPIC -Dversioned_lib_EXPORTS -fPIC "versioned.c" -o "$out"
    '';
    installPhase = "true";
  };

  app_test_shared_library_main_c_o = stdenv.mkDerivation {
    name = "main.o";
    src = ./..;
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      gcc -c -O3 -DNDEBUG "main.c" -o "$out"
    '';
    installPhase = "true";
  };

  static_helper_test_shared_library_helper_c_o = stdenv.mkDerivation {
    name = "helper.o";
    src = ./..;
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      gcc -c -O3 -DNDEBUG "helper.c" -o "$out"
    '';
    installPhase = "true";
  };

  mixed_app_test_shared_library_mixed_c_o = stdenv.mkDerivation {
    name = "mixed.o";
    src = ./..;
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      gcc -c -O3 -DNDEBUG "mixed.c" -o "$out"
    '';
    installPhase = "true";
  };


  # Linking derivations
  link_mylib = cmakeNixLD {
    name = "mylib";
    type = "shared";
    buildInputs = [gcc ];
    objects = [mylib_test_shared_library_lib_c_o ];
    compiler = gcc;
  };

  link_versioned_lib = cmakeNixLD {
    name = "versioned_lib";
    type = "shared";
    buildInputs = [gcc ];
    objects = [versioned_lib_test_shared_library_versioned_c_o ];
    compiler = gcc;
    version = "1.2.3";
    soversion = "1";
  };

  link_app = cmakeNixLD {
    name = "app";
    type = "executable";
    buildInputs = [gcc link_mylib ];
    objects = [app_test_shared_library_main_c_o ];
    compiler = gcc;
    flags = "${link_mylib}/libmylib.so";
  };

  link_static_helper = cmakeNixLD {
    name = "static_helper";
    type = "static";
    buildInputs = [gcc ];
    objects = [static_helper_test_shared_library_helper_c_o ];
    compiler = gcc;
  };

  link_mixed_app = cmakeNixLD {
    name = "mixed_app";
    type = "executable";
    buildInputs = [gcc link_mylib ];
    objects = [mixed_app_test_shared_library_mixed_c_o ];
    compiler = gcc;
    flags = "${link_mylib}/libmylib.so ${link_static_helper}";
  };

in
{
  "mylib" = link_mylib;
  "versioned_lib" = link_versioned_lib;
  "app" = link_app;
  "static_helper" = link_static_helper;
  "mixed_app" = link_mixed_app;
}
