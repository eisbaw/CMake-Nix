# Generated by CMake Nix Generator
with import <nixpkgs> {};
with pkgs;

let
# Helper functions for DRY derivations

  cmakeNixCC = {
    name,
    src,
    compiler ? gcc,
    flags ? "",
    source,  # Source file path relative to src
    buildInputs ? [],
    propagatedInputs ? []
  }: stdenv.mkDerivation {
    inherit name src buildInputs propagatedInputs;
    dontFixup = true;
    buildPhase = ''
      compilerBin=$(
        if [[ "${compiler}" == "${gcc}" ]]; then
          echo "gcc"
        elif [[ "${compiler}" == "${clang}" ]]; then
          echo "clang"
        else
          echo "${compiler.pname or "cc"}"
        fi
      )
      ${compiler}/bin/$compilerBin -c ${flags} "${source}" -o "$out"
    '';
    installPhase = "true";
  };

  cmakeNixLD = {
    name,
    type ? "executable",  # "executable", "static", "shared", "module"
    objects,
    compiler ? gcc,
    compilerCommand ? null,  # Override compiler binary name (e.g., "g++" for C++)
    flags ? "",
    libraries ? [],
    buildInputs ? [],
    version ? null,
    soversion ? null,
    postBuildPhase ? ""
  }: stdenv.mkDerivation {
    inherit name objects buildInputs;
    dontUnpack = true;
    buildPhase =
      if type == "static" then ''
        ar rcs "$out" $objects
      '' else if type == "shared" || type == "module" then ''
        mkdir -p $out
        compilerBin=${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else
          compiler.pname or "cc"
        }
        libname="lib${name}.so"
        ${if version != null then ''
          libname="lib${name}.so.${version}"
        '' else ""}
        ${compiler}/bin/$compilerBin -shared $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out/$libname"
        # Create version symlinks if needed
        ${if version != null then ''
          ln -sf "$libname" "$out/lib${name}.so"
          ${if soversion != null then ''
            ln -sf "$libname" "$out/lib${name}.so.${soversion}"
          '' else ""}
        '' else ""}
      '' else ''
        compilerBin=${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else
          compiler.pname or "cc"
        }
        ${compiler}/bin/$compilerBin $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out"
      '';
    inherit postBuildPhase;
    installPhase = "true";
  };

# Per-translation-unit derivations
  unity_app_src_file1_cpp_o = stdenv.mkDerivation {
    name = "file1.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../src/file1.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "src/file1.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  unity_app_src_file2_cpp_o = stdenv.mkDerivation {
    name = "file2.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../src/file2.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "src/file2.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  unity_app_src_file3_cpp_o = stdenv.mkDerivation {
    name = "file3.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../src/file3.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "src/file3.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  unity_app_test_unity_build_main_cpp_o = stdenv.mkDerivation {
    name = "main.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../main.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "main.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  normal_app_src_file1_cpp_o = stdenv.mkDerivation {
    name = "file1.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../src/file1.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "src/file1.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  normal_app_src_file2_cpp_o = stdenv.mkDerivation {
    name = "file2.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../src/file2.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "src/file2.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  normal_app_src_file3_cpp_o = stdenv.mkDerivation {
    name = "file3.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../src/file3.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "src/file3.cpp" -o "$out"
    '';
    installPhase = "true";
  };

  normal_app_test_unity_build_main_cpp_o = stdenv.mkDerivation {
    name = "main.o";
    src = lib.fileset.toSource {
      root = ./..;
      fileset = ./../main.cpp;
    };
    buildInputs = [ gcc ];
    dontFixup = true;
# Configuration: Release
    buildPhase = ''
      g++ -c -O3 -DNDEBUG "main.cpp" -o "$out"
    '';
    installPhase = "true";
  };


  # Linking derivations
  link_unity_app = cmakeNixLD {
    name = "unity_app";
    type = "executable";
    buildInputs = [gcc ];
    objects = [unity_app_src_file1_cpp_o unity_app_src_file2_cpp_o unity_app_src_file3_cpp_o unity_app_test_unity_build_main_cpp_o ];
    compiler = gcc;
    compilerCommand = "g++";
  };

  link_normal_app = cmakeNixLD {
    name = "normal_app";
    type = "executable";
    buildInputs = [gcc ];
    objects = [normal_app_src_file1_cpp_o normal_app_src_file2_cpp_o normal_app_src_file3_cpp_o normal_app_test_unity_build_main_cpp_o ];
    compiler = gcc;
    compilerCommand = "g++";
  };

in
{
  "unity_app" = link_unity_app;
  "normal_app" = link_normal_app;
}
