# Generated by CMake Nix Generator
with import <nixpkgs> {};
with pkgs;
with lib;

let
# Helper functions for DRY derivations

  cmakeNixCC = {
    name,
    src,
    compiler ? gcc,
    flags ? "",
    source,  # Source file path relative to src
    buildInputs ? [],
    propagatedInputs ? []
  }: stdenv.mkDerivation {
    inherit name src buildInputs propagatedInputs;
    dontFixup = true;
    buildPhase = ''
      mkdir -p "$(dirname "$out")"
      # Determine compiler binary name based on the compiler derivation
      compilerBin="${
        if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else if compiler == gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
      }"
      # When src is a directory, Nix unpacks it into a subdirectory
      # We need to find the actual source file
      # Store source in a variable to handle paths with spaces
      sourceFile="${source}"
      # Check if source is an absolute path or Nix expression (e.g., $\{derivation}/file)
      if [[ "$sourceFile" == /* ]] || [[ "$sourceFile" == *"$"* ]]; then
        # Absolute path or Nix expression - use as-is
        srcFile="$sourceFile"
      elif [[ -f "$sourceFile" ]]; then
        srcFile="$sourceFile"
      elif [[ -f "$(basename "$src")/$sourceFile" ]]; then
        srcFile="$(basename "$src")/$sourceFile"
      else
        echo "Error: Cannot find source file $sourceFile"
        exit 1
      fi
      ${compiler}/bin/$compilerBin -c ${flags} "$srcFile" -o "$out"
    '';
    installPhase = "true";
  };

  # Linking helper function
  # NOTE: This uses Unix-style library naming conventions (lib*.a, lib*.so)
  # This is appropriate since Nix only runs on Unix-like systems (Linux, macOS)
  cmakeNixLD = {
    name,
    type ? "executable",  # "executable", "static", "shared", "module"
    objects,
    compiler ? gcc,
    compilerCommand ? null,  # Override compiler binary name (e.g., "g++" for C++)
    flags ? "",
    libraries ? [],
    buildInputs ? [],
    version ? null,
    soversion ? null,
    postBuildPhase ? ""
  }: stdenv.mkDerivation {
    inherit name objects buildInputs;
    dontUnpack = true;
    buildPhase =
      if type == "static" then ''
        # Unix static library: uses 'ar' to create lib*.a files
        mkdir -p "$(dirname "$out")"
        ar rcs "$out" $objects
      '' else if type == "shared" || type == "module" then ''
        mkdir -p $out
        compilerBin="${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else if compiler == gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
        }";
        # Unix library naming: static=lib*.a, shared=lib*.so, module=*.so
        libname="${if type == "module" then name else "lib" + name}.so"
        ${if version != null && type != "module" then ''
          libname="lib${name}.so.${version}"
        '' else ""}
        ${compiler}/bin/$compilerBin -shared $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out/$libname"
        # Create version symlinks if needed (only for shared libraries, not modules)
        ${if version != null && type != "module" then ''
          ln -sf "$libname" "$out/lib${name}.so"
          ${if soversion != null then ''
            ln -sf "$libname" "$out/lib${name}.so.${soversion}"
          '' else ""}
        '' else ""}
      '' else ''
        mkdir -p "$(dirname "$out")"
        compilerBin="${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else if compiler == gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
        }";
        ${compiler}/bin/$compilerBin $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out"
      '';
    inherit postBuildPhase;
    installPhase = "true";
  };

# Per-translation-unit derivations
  threaded_app_test_find_package_threaded_c_o = cmakeNixCC {
    name = "threaded.o";
    src = ./..;
    buildInputs = [ gcc ];
    source = "threaded.c";
    compiler = gcc;
    flags = "-O3 -DNDEBUG";
  };

  compress_app_test_find_package_compress_c_o = cmakeNixCC {
    name = "compress.o";
    src = ./..;
    buildInputs = [ gcc zlib ];
    source = "compress.c";
    compiler = gcc;
    flags = "-O3 -DNDEBUG";
  };

  opengl_app_test_find_package_opengl_c_o = cmakeNixCC {
    name = "opengl.o";
    src = ./..;
    buildInputs = [ gcc libGL ];
    source = "opengl.c";
    compiler = gcc;
    flags = "-O3 -DNDEBUG";
  };


  # Linking derivations
  link_threaded_app = cmakeNixLD {
    name = "threaded_app";
    type = "executable";
    buildInputs = [ gcc ];
    objects = [ threaded_app_test_find_package_threaded_c_o ];
    compiler = gcc;
    flags = "-lpthread";
  };

  link_compress_app = cmakeNixLD {
    name = "compress_app";
    type = "executable";
    buildInputs = [ gcc zlib ];
    objects = [ compress_app_test_find_package_compress_c_o ];
    compiler = gcc;
    flags = "-lz";
  };

  link_opengl_app = cmakeNixLD {
    name = "opengl_app";
    type = "executable";
    buildInputs = [ gcc libGL ];
    objects = [ opengl_app_test_find_package_opengl_c_o ];
    compiler = gcc;
    flags = "-lGL";
  };

in
{
  "threaded_app" = link_threaded_app;
  "compress_app" = link_compress_app;
  "opengl_app" = link_opengl_app;
}
