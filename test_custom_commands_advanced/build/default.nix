# Generated by CMake Nix Generator
with import <nixpkgs> {};
with pkgs;
with lib;

let
# Helper functions for DRY derivations

  cmakeNixCC = {
    name,
    src,
    compiler ? gcc,
    flags ? "",
    source,  # Source file path relative to src
    buildInputs ? [],
    propagatedInputs ? []
  }: stdenv.mkDerivation {
    inherit name src buildInputs propagatedInputs;
    dontFixup = true;
    buildPhase = ''
      compilerBin=$(
        if [[ "${compiler}" == "${gcc}" ]]; then
          echo "gcc"
        elif [[ "${compiler}" == "${clang}" ]]; then
          echo "clang"
        elif [[ "${compiler}" == "${gfortran}" ]]; then
          echo "gfortran"
        else
          echo "${compiler.pname or "cc"}"
        fi
      )
      ${compiler}/bin/$compilerBin -c ${flags} "${source}" -o "$out"
    '';
    installPhase = "true";
  };

  # Linking helper function
  # NOTE: This uses Unix-style library naming conventions (lib*.a, lib*.so)
  # This is appropriate since Nix only runs on Unix-like systems (Linux, macOS)
  cmakeNixLD = {
    name,
    type ? "executable",  # "executable", "static", "shared", "module"
    objects,
    compiler ? gcc,
    compilerCommand ? null,  # Override compiler binary name (e.g., "g++" for C++)
    flags ? "",
    libraries ? [],
    buildInputs ? [],
    version ? null,
    soversion ? null,
    postBuildPhase ? ""
  }: stdenv.mkDerivation {
    inherit name objects buildInputs;
    dontUnpack = true;
    buildPhase =
      if type == "static" then ''
        # Unix static library: uses 'ar' to create lib*.a files
        ar rcs "$out" $objects
      '' else if type == "shared" || type == "module" then ''
        mkdir -p $out
        compilerBin=${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else if compiler == gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
        }
        # Unix library naming: static=lib*.a, shared=lib*.so, module=*.so
        libname="${if type == "module" then name else "lib" + name}.so"
        ${if version != null && type != "module" then ''
          libname="lib${name}.so.${version}"
        '' else ""}
        ${compiler}/bin/$compilerBin -shared $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out/$libname"
        # Create version symlinks if needed (only for shared libraries, not modules)
        ${if version != null && type != "module" then ''
          ln -sf "$libname" "$out/lib${name}.so"
          ${if soversion != null then ''
            ln -sf "$libname" "$out/lib${name}.so.${soversion}"
          '' else ""}
        '' else ""}
      '' else ''
        compilerBin=${if compilerCommand != null then
          compilerCommand
        else if compiler == gcc then
          "gcc"
        else if compiler == clang then
          "clang"
        else if compiler == gfortran then
          "gfortran"
        else
          compiler.pname or "cc"
        }
        ${compiler}/bin/$compilerBin $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out"
      '';
    inherit postBuildPhase;
    installPhase = "true";
  };

  custom_build_generated_config_h_4826 = stdenv.mkDerivation {
    name = "custom_build_generated_config_h_4826";
    buildInputs = [ pkgs.coreutils ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      echo "#define VERSION \"1.2.3\"" > config.h
      mkdir -p $out/generated
      cp config.h $out/generated/config.h
    '';
  };

  custom_build_multioutput1_txt_8375_5047 = stdenv.mkDerivation {
    name = "custom_build_multioutput1_txt_8375_5047";
    buildInputs = [ pkgs.coreutils ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      echo "Output 1" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/multi_output1.txt
      echo "Output 2" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/multi_output2.txt
      echo "Output 3" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/multi_output3.txt
      cp multi_output1.txt $out/multi_output1.txt
      cp multi_output2.txt $out/multi_output2.txt
      cp multi_output3.txt $out/multi_output3.txt
    '';
  };

  custom_build_shelltest_txt_7576 = stdenv.mkDerivation {
    name = "custom_build_shelltest_txt_7576";
    buildInputs = [ pkgs.coreutils ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      echo "Testing shell operators: && || ; > < | \$VAR" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/shell_test.txt
      cp shell_test.txt $out/shell_test.txt
    '';
  };

  custom_build_CMakeFiles_generateall = stdenv.mkDerivation {
    name = "custom_build_CMakeFiles_generateall";
    buildInputs = [ custom_build_generated_config_h custom_build_multioutput1_txt custom_build_multioutput2_txt custom_build_multioutput3_txt custom_build_shelltest_txt custom_build_dependent_txt ];
    phases = [ "installPhase" ];
    installPhase = ''
      mkdir -p $out
      mkdir -p $out/CMakeFiles
      touch $out/CMakeFiles/generate_all
    '';
  };

  custom_build_dependent_txt_7347 = stdenv.mkDerivation {
    name = "custom_build_dependent_txt_7347";
    buildInputs = [ pkgs.coreutils custom_build_multioutput1_txt custom_build_multioutput2_txt ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_multioutput1_txt}/multi_output1.txt .
      cp ${custom_build_multioutput2_txt}/multi_output2.txt .
      /home/mpedersen/topics/cmake_nix_backend/CMake/bin/cmake -E cat multi_output1.txt multi_output2.txt > dependent.txt
      cp dependent.txt $out/dependent.txt
    '';
  };

# Per-translation-unit derivations
  test_app_test_custom_commands_advanced_main_cpp_o = cmakeNixCC {
    name = "main.o";
    src = ./..;
    buildInputs = [ gcc ];
    source = "main.cpp";
    compiler = gcc;
    flags = "-g -Ibuild/generated";
  };


  # Linking derivations
  link_test_app = cmakeNixLD {
    name = "test_app";
    type = "executable";
    buildInputs = [gcc ];
    objects = [test_app_test_custom_commands_advanced_main_cpp_o ];
    compiler = gcc;
    compilerCommand = "g++";
  };

in
{
  "test_app" = link_test_app;
}
