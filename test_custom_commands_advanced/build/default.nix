# Generated by CMake Nix Generator
with import <nixpkgs> {};
with pkgs;
with lib;

let
# Helper function to create a fileset union from a list of paths
  makeFilesetUnion = rootPath: paths:
    let
      # Convert a path to a fileset, handling both files and directories
      toFileset = path:
        if builtins.pathExists path then
          if lib.pathIsDirectory path then
            lib.fileset.fromSource (lib.sources.sourceByRegex rootPath ["${path}/.*"])
          else
            lib.fileset.fromSource (lib.sources.sourceByRegex rootPath ["${path}"])
        else
          lib.fileset.fromSource (lib.sources.sourceByRegex rootPath []);
          
      # Create filesets for all paths
      filesets = map toFileset paths;
      
      # Start with an empty fileset
      emptySet = lib.fileset.fromSource (lib.sources.sourceByRegex rootPath []);
    in
      # Union all filesets together
      builtins.foldl' lib.fileset.union emptySet filesets;

# Helper functions will be moved to cmNixDerivationWriter
# Helper functions for DRY derivations

  cmakeNixCC = {
    name,
    src,
    compiler ? gcc,
    flags ? "",
    source,  # Source file path relative to src
    buildInputs ? []
  }: stdenv.mkDerivation {
    inherit name src buildInputs;
    dontFixup = true;
    buildPhase = ''
      mkdir -p "$(dirname "$out")"
      # Store source in a variable to handle paths with spaces
      sourceFile="${source}"
      # Determine how to invoke the compiler based on the compiler derivation
      # When using stdenv.cc, we use the wrapped compiler directly
      # For other compilers, we use the binary directly
      if [ "${compiler}" = "${stdenv.cc}" ] || [ "${compiler}" = "${pkgsi686Linux.stdenv.cc}" ]; then
        # stdenv.cc is a wrapped compiler - use it directly
        if [[ "$sourceFile" == *.cpp ]] || [[ "$sourceFile" == *.cxx ]] || [[ "$sourceFile" == *.cc ]] || [[ "$sourceFile" == *.C ]]; then
          compilerCmd="${compiler}/bin/g++"
        else
          compilerCmd="${compiler}/bin/gcc"
        fi
      else
        # For other compilers, determine the binary name
        if [ "${compiler}" = "${gcc}" ] || [ "${compiler}" = "${pkgsi686Linux.gcc}" ]; then
          if [[ "$sourceFile" == *.cpp ]] || [[ "$sourceFile" == *.cxx ]] || [[ "$sourceFile" == *.cc ]] || [[ "$sourceFile" == *.C ]]; then
            compilerBin="g++"
          else
            compilerBin="gcc"
          fi
        elif [ "${compiler}" = "${clang}" ] || [ "${compiler}" = "${pkgsi686Linux.clang}" ]; then
          if [[ "$sourceFile" == *.cpp ]] || [[ "$sourceFile" == *.cxx ]] || [[ "$sourceFile" == *.cc ]] || [[ "$sourceFile" == *.C ]]; then
            compilerBin="clang++"
          else
            compilerBin="clang"
          fi
        elif [ "${compiler}" = "${gfortran}" ] || [ "${compiler}" = "${pkgsi686Linux.gfortran}" ]; then
          compilerBin="gfortran"
        else
          compilerBin="${compiler.pname or "cc"}"
        fi
        compilerCmd="${compiler}/bin/$compilerBin"
      fi
      # When src is a directory, Nix unpacks it into a subdirectory
      # We need to find the actual source file
      # Check if source is an absolute path or Nix expression (e.g., derivation/file)
      if [[ "$sourceFile" == /* ]] || [[ "$sourceFile" == *"\$"* ]]; then
        # Absolute path or Nix expression - use as-is
        srcFile="$sourceFile"
      elif [[ -f "$sourceFile" ]]; then
        srcFile="$sourceFile"
      elif [[ -f "$(basename "$src")/$sourceFile" ]]; then
        srcFile="$(basename "$src")/$sourceFile"
      else
        echo "Error: Cannot find source file $sourceFile"
        exit 1
      fi
      $compilerCmd -c ${flags} "$srcFile" -o "$out"
    '';
    installPhase = "true";
  };

  # Linking helper function
  # NOTE: This uses Unix-style library naming conventions (lib*.a, lib*.so)
  # This is appropriate since Nix only runs on Unix-like systems (Linux, macOS)
  cmakeNixLD = {
    name,
    type ? "executable",  # "executable", "static", "shared", "module"
    objects,
    compiler ? gcc,
    compilerCommand ? null,  # Override compiler binary name (e.g., "g++" for C++)
    flags ? "",
    libraries ? [],
    buildInputs ? [],
    version ? null,
    soversion ? null,
    postBuildPhase ? ""
  }: stdenv.mkDerivation {
    inherit name objects buildInputs;
    dontUnpack = true;
    buildPhase =
      if type == "static" then ''
        # Unix static library: uses 'ar' to create lib*.a files
        mkdir -p "$(dirname "$out")"
        ar rcs "$out" $objects
      '' else if type == "shared" || type == "module" then ''
        mkdir -p $out
        # Determine compiler command - use stdenv.cc's wrapped compiler when available
        if [ "${compiler}" = "${stdenv.cc}" ] || [ "${compiler}" = "${pkgsi686Linux.stdenv.cc}" ]; then
          # Use compilerCommand override if provided, otherwise use the wrapped compiler
          compilerCmd="${if compilerCommand != null then compilerCommand else "${compiler}/bin/gcc"}"
        else
          # For other compilers, use the binary directly
          compilerBin="${if compilerCommand != null then
            compilerCommand
          else if compiler == gcc || compiler == pkgsi686Linux.gcc then
            "gcc"
          else if compiler == clang || compiler == pkgsi686Linux.clang then
            "clang"
          else if compiler == gfortran || compiler == pkgsi686Linux.gfortran then
            "gfortran"
          else
            compiler.pname or "cc"
          }";
          compilerCmd="${compiler}/bin/$compilerBin"
        fi
        # Unix library naming: static=lib*.a, shared=lib*.so, module=*.so
        libname="${if type == "module" then name else "lib" + name}.so"
        ${if version != null && type != "module" then ''
          libname="lib${name}.so.${version}"
        '' else ""}
        $compilerCmd -shared $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out/$libname"
        # Create version symlinks if needed (only for shared libraries, not modules)
        ${if version != null && type != "module" then ''
          ln -sf "$libname" "$out/lib${name}.so"
          ${if soversion != null then ''
            ln -sf "$libname" "$out/lib${name}.so.${soversion}"
          '' else ""}
        '' else ""}
      '' else ''
        mkdir -p "$(dirname "$out")"
        # Determine compiler command - use stdenv.cc's wrapped compiler when available
        if [ "${compiler}" = "${stdenv.cc}" ] || [ "${compiler}" = "${pkgsi686Linux.stdenv.cc}" ]; then
          # Use compilerCommand override if provided, otherwise use the wrapped compiler
          compilerCmd="${if compilerCommand != null then compilerCommand else "${compiler}/bin/gcc"}"
        else
          # For other compilers, use the binary directly
          compilerBin="${if compilerCommand != null then
            compilerCommand
          else if compiler == gcc || compiler == pkgsi686Linux.gcc then
            "gcc"
          else if compiler == clang || compiler == pkgsi686Linux.clang then
            "clang"
          else if compiler == gfortran || compiler == pkgsi686Linux.gfortran then
            "gfortran"
          else
            compiler.pname or "cc"
          }";
          compilerCmd="${compiler}/bin/$compilerBin"
        fi
        $compilerCmd $objects ${flags} ${lib.concatMapStringsSep " " (l: l) libraries} -o "$out"
      '';
    inherit postBuildPhase;
    installPhase = "true";
  };

# Per-translation-unit derivations
  test_app_test_custom_commands_advanced_main_cpp_o = cmakeNixCC {
    name = "main.o";
    src = fileset.toSource {
      root = ./..;
      fileset = fileset.unions [
        ./../main.cpp
        ./../build/generated
      ];
    };
    buildInputs = [ stdenv.cc ];
    source = "main.cpp";
    compiler = stdenv.cc;
    flags = "-g -Ibuild/generated";
  };

  custom_build_multioutput1_txt_8375_5047 = stdenv.mkDerivation {
    name = "custom_build_multioutput1_txt_8375_5047";
    buildInputs = [ pkgs.coreutils pkgs.cmake ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      echo "Output 1" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/multi_output1.txt
      echo "Output 2" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/multi_output2.txt
      echo "Output 3" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/multi_output3.txt
      if [ -f multi_output1.txt ]; then
        cp multi_output1.txt $out/multi_output1.txt
      elif [ -f multi_output1.txt ]; then
        cp multi_output1.txt $out/multi_output1.txt
      fi
      if [ -f multi_output2.txt ]; then
        cp multi_output2.txt $out/multi_output2.txt
      elif [ -f multi_output2.txt ]; then
        cp multi_output2.txt $out/multi_output2.txt
      fi
      if [ -f multi_output3.txt ]; then
        cp multi_output3.txt $out/multi_output3.txt
      elif [ -f multi_output3.txt ]; then
        cp multi_output3.txt $out/multi_output3.txt
      fi
    '';
  };

  custom_build_shelltest_txt_7576 = stdenv.mkDerivation {
    name = "custom_build_shelltest_txt_7576";
    buildInputs = [ pkgs.coreutils pkgs.cmake ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      echo "Testing shell operators: && || ; > < | \$$VAR" > /home/mpedersen/topics/cmake_nix_backend/CMake/test_custom_commands_advanced/build/shell_test.txt
      if [ -f shell_test.txt ]; then
        cp shell_test.txt $out/shell_test.txt
      elif [ -f shell_test.txt ]; then
        cp shell_test.txt $out/shell_test.txt
      fi
    '';
  };

  custom_build_dependent_txt_7347 = stdenv.mkDerivation {
    name = "custom_build_dependent_txt_7347";
    buildInputs = [ pkgs.coreutils pkgs.cmake custom_build_multioutput1_txt_8375_5047 ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      cp ${custom_build_multioutput1_txt_8375_5047}/multi_output1.txt multi_output1.txt
      ${pkgs.cmake}/bin/cmake -E cat multi_output1.txt multi_output2.txt > dependent.txt
      if [ -f dependent.txt ]; then
        cp dependent.txt $out/dependent.txt
      elif [ -f dependent.txt ]; then
        cp dependent.txt $out/dependent.txt
      fi
    '';
  };

  custom_build_CMakeFiles_generateall = stdenv.mkDerivation {
    name = "custom_build_CMakeFiles_generateall";
    buildInputs = [ custom_build_dependent_txt_7347 custom_build_generated_config_h_4826 custom_build_multioutput1_txt_8375_5047 custom_build_shelltest_txt_7576 ];
    phases = [ "installPhase" ];
    installPhase = ''
      mkdir -p $out
      mkdir -p $out/CMakeFiles
      touch $out/CMakeFiles/generate_all
    '';
  };

  custom_build_generated_config_h_4826 = stdenv.mkDerivation {
    name = "custom_build_generated_config_h_4826";
    buildInputs = [ pkgs.coreutils pkgs.cmake ];
    phases = [ "buildPhase" ];
    buildPhase = ''
      mkdir -p $out
      echo "#define VERSION \"1.2.3\"" > config.h
      mkdir -p $out/generated
      if [ -f generated/config.h ]; then
        cp generated/config.h $out/generated/config.h
      elif [ -f config.h ]; then
        cp config.h $out/generated/config.h
      fi
    '';
  };


  # Linking derivations
  link_test_app = cmakeNixLD {
    name = "test_app";
    type = "executable";
    buildInputs = [ gcc ];
    objects = [ test_app_test_custom_commands_advanced_main_cpp_o ];
    compiler = gcc;
    compilerCommand = "g++";
  };

in
{
  "test_app" = link_test_app;
}
